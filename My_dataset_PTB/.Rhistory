getwd()
setwd("/home/kate/github/GenomicsUA_2023_rnaseq/My_dataset_PTB")
library(tidyverse)
library(org.Mm.eg.db)
library(biomaRt)
library(tximport)
#upload metadata and count_table
metadata_table <- read.csv("ptb_metadata_table.csv")
counts_tsv <- "./counts.tsv"
if (file.exists(counts_tsv)){
counts <- read_tsv(counts_tsv) %>% column_to_rownames("ensembl_gene_id")
}else{
files <- fs::dir_ls(path = "./geo_inp", glob = "*quant.sf.txt")
counts <- readr::read_tsv(files, id = "path", col_names = T, col_select = c("Name", "NumReads"))
colnames(counts)<-c("path","ensembl_gene_id", "raw_counts")
df_split <- str_split_fixed(counts$path, "_", 3) %>% as.data.frame()
counts$sample <- df_split$V2
counts <- counts %>%
mutate(sample = str_replace(sample, "inp/", "")) %>%
dplyr::relocate(sample) %>% dplyr::select(-path) %>%
pivot_wider(names_from = "sample", values_from = "raw_counts")
write.table(counts, counts_tsv, sep="\t", row.names = F)
}
#remove low counts from analysis and rownames_to_column
counts <- counts[which(rowSums(counts)>10),]%>% rownames_to_column("ensembl_transcript_id")
View(counts)
#upload metadata and count_table
metadata_table <- read.csv("ptb_metadata_table.csv")
counts_tsv <- "./counts_ptb.tsv"
if (file.exists(counts_tsv)){
counts <- read_tsv(counts_tsv)
}else{
files <- fs::dir_ls(path = "./geo_inp", glob = "*quant.sf.txt")
counts <- readr::read_tsv(files, id = "path", col_names = T, col_select = c("Name", "NumReads"))
colnames(counts)<-c("path","ensembl_tr_id", "raw_counts")
df_split <- str_split_fixed(counts$path, "_", 3) %>% as.data.frame()
counts$sample <- df_split$V2
counts <- counts %>%
mutate(sample = str_replace(sample, "inp/", "")) %>%
dplyr::relocate(sample) %>% dplyr::select(-path) %>%
pivot_wider(names_from = "sample", values_from = "raw_counts")
write.table(counts, counts_tsv, sep="\t", row.names = T)
}
View(counts)
files <- fs::dir_ls(path = "./geo_inp", glob = "*quant.sf.txt")
counts <- readr::read_tsv(files, id = "path", col_names = T, col_select = c("Name", "NumReads"))
colnames(counts)<-c("path","ensembl_tr_id", "raw_counts")
df_split <- str_split_fixed(counts$path, "_", 3) %>% as.data.frame()
counts$sample <- df_split$V2
counts <- counts %>%
mutate(sample = str_replace(sample, "inp/", "")) %>%
dplyr::relocate(sample) %>% dplyr::select(-path) %>%
pivot_wider(names_from = "sample", values_from = "raw_counts")
write.table(counts, counts_tsv, sep="\t", row.names = T)
View(counts)
files <- fs::dir_ls(path = "./geo_inp", glob = "*quant.sf.txt")
counts <- readr::read_tsv(files, id = "path", col_names = T, col_select = c("Name", "NumReads"))
colnames(counts)<-c("path","ensembl_tr_id", "raw_counts")
df_split <- str_split_fixed(counts$path, "_", 3) %>% as.data.frame()
counts$sample <- df_split$V2
counts <- counts %>%
mutate(sample = str_replace(sample, "inp/", "")) %>%
dplyr::relocate(sample) %>% dplyr::select(-path) %>%
pivot_wider(names_from = "sample", values_from = "raw_counts")
write.table(counts, counts_tsv, sep="\t", row.names = F)
View(counts)
metadata_table <- read.csv("ptb_metadata_table.csv")
counts_tsv <- "./counts_ptb.tsv"
if (file.exists(counts_tsv)){
counts <- read_tsv(counts_tsv)
}else{
files <- fs::dir_ls(path = "./geo_inp", glob = "*quant.sf.txt")
counts <- readr::read_tsv(files, id = "path", col_names = T, col_select = c("Name", "NumReads"))
colnames(counts)<-c("path","ensembl_tr_id", "raw_counts")
df_split <- str_split_fixed(counts$path, "_", 3) %>% as.data.frame()
counts$sample <- df_split$V2
counts <- counts %>%
mutate(sample = str_replace(sample, "inp/", "")) %>%
dplyr::relocate(sample) %>% dplyr::select(-path) %>%
pivot_wider(names_from = "sample", values_from = "raw_counts")
write.table(counts, counts_tsv, sep="\t", row.names = F)
}
View(counts)
counts <- read_tsv(counts_tsv)
View(counts)
counts <- counts[which(rowSums(counts)>10),]
#remove low counts from analysis and rownames_to_column
counts <- counts[rowSums(counts[sapply(counts, is.numeric)]) > 10, ] #%>% rownames_to_column("ensembl_transcript_id")
View(counts)
#checking if unique
counts %>%unique()
keytypes(org.Mm.eg.db)
mapped_id <- mapIds(org.Mm.eg.db, counts$ensembl_tr_id, "SYMBOL", "ENSEMBLTRANS")
mapped_id <- mapIds(org.Mm.eg.db, keys = counts$ensembl_tr_id, column = "SYMBOL", keytype = "ENSEMBL")
mapped_id <- mapIds(org.Mm.eg.db, keys = counts$ensembl_tr_id, column = "SYMBOL", keytype = "ENSEMBLTRANS")
#remove info after dot (remove version of transcropt ID)
counts_b <- counts
counts$ensembl_transcript_id <- gsub("\\.\\d+$", "", counts$ensembl_transcript_id)
View(counts)
#remove info after dot (remove version of transcropt ID)
#counts_b <- counts
counts$ensembl_tr_id <- gsub("\\.\\d+$", "", counts$ensembl_tr_id)
mapped_id <- mapIds(org.Mm.eg.db, keys = counts$ensembl_tr_id, column = "SYMBOL", keytype = "ENSEMBLTRANS")
mapped_id
counts <- counts_b
ensembl <- useMart("ensembl", dataset = "mmusculus_gene_ensembl")
listAttributes(ensembl)
listAttributes(ensembl)
biomart_list <- getBM(filter="ensembl_tr_id",
attributes = c("ensembl_transcript_id", "ensembl_transcript_id_version", "hgnc_symbol", "hgnc_trans_name","transcript_biotype",
"description"),
values = counts$ensembl_tr_id, mart = ensembl)
biomart_list <- getBM(filter="ensembl_transcript_id_version",
attributes = c("ensembl_transcript_id", "ensembl_transcript_id_version", "hgnc_symbol", "hgnc_trans_name","transcript_biotype",
"description"),
values = counts$ensembl_tr_id, mart = ensembl)
View(biomart_list)
View(counts)
biomart_list <- getBM(filter="ensembl_transcript_id",
attributes = c("ensembl_transcript_id", "ensembl_transcript_id_version", "hgnc_symbol", "hgnc_trans_name","transcript_biotype",
"description"),
values = counts$ensembl_tr_id, mart = ensembl)
biomart_list <- getBM(filter="ensembl_transcript_id_version",
attributes = c("ensembl_transcript_id", "ensembl_transcript_id_version", "hgnc_symbol", "hgnc_trans_name","transcript_biotype",
"description"),
values = counts$ensembl_tr_id, mart = ensembl)
View(biomart_list)
#remove info after dot (remove version of transcropt ID)
counts$ensembl_tr_id <- gsub("\\.\\d+$", "", counts$ensembl_tr_id)
View(counts)
biomart_list <- getBM(filter="ensembl_transcript_id",
attributes = c("ensembl_transcript_id", "ensembl_transcript_id_version", "hgnc_symbol", "hgnc_trans_name","transcript_biotype",
"description"),
values = counts$ensembl_tr_id, mart = ensembl)
View(biomart_list)
biomart_list <- getBM(filter="ensembl_transcript_id",
attributes = c("ensembl_transcript_id", "ensembl_transcript_id_version", "hgnc_symbol", "mgi_symbol","transcript_biotype",
"description"),
values = counts$ensembl_tr_id, mart = ensembl)
View(biomart_list)
biomart_list <- getBM(filter="ensembl_transcript_id",
attributes = c("ensembl_transcript_id", "mgi_symbol","transcript_biotype",
"description"),
values = counts$ensembl_tr_id, mart = ensembl)
View(biomart_list)
unique(biomart_list$transcript_biotype)
biomart_list <- subset(biomart_list, !is.na(mgi_symbol) & mgi_symbol != "")
View(biomart_list)
counts_filtered <- counts %>% filter(ensembl_tr_id %in% biomart_list$ensembl_transcript_id)
write.csv(counts_filtered, "outputs/counts_filtered.csv", row.names = FALSE)
write.csv(counts_filtered, "outputs/counts_filtered.csv", row.names = FALSE)
write.csv(biomart_list, "outputs/biomart_list.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/home/kate/github/GenomicsUA_2023_rnaseq/My_dataset_PTB")
setwd("/home/kate/github/GenomicsUA_2023_rnaseq/My_dataset_PTB"
setwd("/home/kate/github/GenomicsUA_2023_rnaseq/My_dataset_PTB")
library(PCAtools)
library(pheatmap)
library(DESeq2)
library(tidyverse)
count_matrix <- read.csv("counts_ptb.tsv", row.names = 1)
count_matrix_filtered <- read.csv("outputs/counts_filtered.csv", row.names = 1)
metadata_table <- read.csv("ptb_metadata_table.csv", row.names = 1)
library(PCAtools)
library(pheatmap)
library(DESeq2)
library(tidyverse)
count_matrix <- read.csv("counts_ptb.tsv", row.names = 1)
count_matrix_filtered <- read.csv("outputs/counts_filtered.csv", row.names = 1)
metadata_table <- read.csv("ptb_metadata_table.csv", row.names = 1)
View(count_matrix_filtered)
View(metadata_table)
pca_calculated <- pca(count_matrix, metadata = metadata_table, removeVar = 0.1)
View(metadata_table)
View(count_matrix_filtered)
View(metadata_table)
View(count_matrix_filtered)
View(count_matrix_filtered)
View(metadata_table)
# Get column names of the matrix
mat_colnames <- colnames(count_matrix)
# Get row names of the metadata data frame
metadata_rownames <- rownames(metadata_table)
# Find which names are not identical
non_identical_names <- setdiff(mat_colnames, metadata_rownames)
# Display the non-identical names
print(non_identical_names)
pca_calculated <- pca(count_matrix, metadata = metadata_table, removeVar = 0.1)
pca_calculated <- pca(count_matrix_filtered, metadata = metadata_table, removeVar = 0.1)
biplot(pca_calculated, colby = "time", legendPosition = "right", lab = NULL)
biplot(pca_calculated, colby = "", legendPosition = "right", lab = NULL)
biplot(pca_calculated, colby = "Time", legendPosition = "right", lab = NULL)
dds <- DESeqDataSetFromMatrix(countData = count_matrix_filtered, colData = metadata_table,
design = ~1)
metadata_table <- read.csv("ptb_metadata_table.csv", row.names = 1)
View(metadata_table)
dds <- DESeqDataSetFromMatrix(countData = count_matrix_filtered, colData = metadata_table,
design = ~1)
View(count_matrix_filtered)
library(tximport)
samples <- read.table(file.path(/home/kate/github/GenomicsUA_2023_rnaseq/My_dataset_PTB,"SraRunTable.txt"), header=TRUE)
samples <- read.table(file.path("/home/kate/github/GenomicsUA_2023_rnaseq/My_dataset_PTB","SraRunTable.txt"), header=TRUE)
samples <- read.table(file.path("/home/kate/github/GenomicsUA_2023_rnaseq/My_dataset_PTB","SraRunTable.txt"), header=TRUE, sep = ",")
View(samples)
files <- file.path("/home/kate/github/GenomicsUA_2023_rnaseq/My_dataset_PTB/geo_inp", "salmon", samples$Run, "quant.sf.gz")
names(files) <- paste0("sample", 1:6)
all(file.exists(files))
files
files <- file.path("/home/kate/github/GenomicsUA_2023_rnaseq/My_dataset_PTB/geo_inp", *)
?file.path
files <- list.files("/home/kate/github/GenomicsUA_2023_rnaseq/My_dataset_PTB/geo_inp", full.names = TRUE)
files
names(files) <- samples$GEO_Accession..exp.
files
all(file.exists(files))
BiocManager::install("TxDb.Mmusculus.UCSC.mm10.knownGene")
library(TxDb.Mmusculus.UCSC.mm10.knownGene)
txdb_mouse <- TxDb.Mmusculus.UCSC.mm10.knownGene
k_mouse <- keys(txdb_mouse, keytype = "TXNAME")
tx2gene_mouse <- select(txdb_mouse, k_mouse, "GENEID", "TXNAME")
head(tx2gene_mouse)
biomart_list <- read.csv("outputs/biomart_list.csv", row.names = 1)
View(biomart_list)
biomart_list <- read.csv("outputs/biomart_list.csv")
View(biomart_list)
#upload metadata and count_table
metadata_table <- read.csv("ptb_metadata_table.csv")
counts_tsv <- "./counts_ptb.tsv"
if (file.exists(counts_tsv)){
counts <- read_tsv(counts_tsv)
}else{
files <- fs::dir_ls(path = "./geo_inp", glob = "*quant.sf.txt")
counts <- readr::read_tsv(files, id = "path", col_names = T, col_select = c("Name", "NumReads"))
colnames(counts)<-c("path","ensembl_tr_id", "raw_counts")
df_split <- str_split_fixed(counts$path, "_", 3) %>% as.data.frame()
counts$sample <- df_split$V2
counts <- counts %>%
mutate(sample = str_replace(sample, "inp/", "")) %>%
dplyr::relocate(sample) %>% dplyr::select(-path) %>%
pivot_wider(names_from = "sample", values_from = "raw_counts")
write.table(counts, counts_tsv, sep="\t", row.names = F)
}
#remove low counts from analysis and rownames_to_column
counts <- counts[rowSums(counts[sapply(counts, is.numeric)]) > 10, ]
#checking if unique
counts %>%unique()
View(counts)
View(metadata_table)
ensembl <- useMart("ensembl", dataset = "mmusculus_gene_ensembl")
listAttributes(ensembl)
biomart_list <- getBM(filter="ensembl_transcript_id_version",
attributes = c("ensembl_transcript_id_version", "mgi_symbol","transcript_biotype",
"description"),
values = counts$ensembl_tr_id, mart = ensembl)
View(biomart_list)
View(biomart_list)
biomart_list <- read.csv("outputs/biomart_list.csv")
tx2gene_mouse_c$TXNAME <- biomart_list$ensembl_transcript_id
head(tx2gene_mouse)
library(TxDb.Mmusculus.UCSC.mm10.knownGene)
txdb_mouse <- TxDb.Mmusculus.UCSC.mm10.knownGene
k_mouse <- keys(txdb_mouse, keytype = "TXNAME")
tx2gene_mouse <- select(txdb_mouse, k_mouse, "GENEID", "TXNAME")
head(tx2gene_mouse)
tx2gene_mouse_c <- biomart_list %>%
select(TXNAME = ensembl_transcript_id, GENEID = mgi_symbol)
tx2gene_mouse_c <- as.data.frame(biomart_list) %>%
select(TXNAME = ensembl_transcript_id, GENEID = mgi_symbol)
tx2gene_mouse_c <- dplyr::select(as.data.frame(biomart_list), TXNAME = ensembl_transcript_id, GENEID = mgi_symbol)
View(tx2gene_mouse_c)
View(tx2gene_mouse)
head(tx2gene_mouse_c)
samples <- read.table(file.path("/home/kate/github/GenomicsUA_2023_rnaseq/My_dataset_PTB","SraRunTable.txt"), header=TRUE, sep = ",")
files <- list.files("/home/kate/github/GenomicsUA_2023_rnaseq/My_dataset_PTB/geo_inp", full.names = TRUE)
names(files) <- samples$GEO_Accession..exp.
all(file.exists(files))
library(tximport)
txi <- tximport(files, type = "salmon", tx2gene = tx2gene_mouse_c)
txi <- tximport(files, type = "salmon", tx2gene = tx2gene_mouse_c, ignoreTxVersion=T)
names(txi)
head(txi$counts)
View(samples)
sampleTable <-  dplyr::select(as.data.frame(samples), culture_conditions, genetic manipulation, tissue)
samples <-  dplyr::select(as.data.frame(samples), culture_conditions, genetic manipulation, tissue)
View(metadata_table)
dds <- DESeqDataSetFromTximport(txi, sampleTable=metadata_table, ~1)
rownames(metadata_table) == colnames(txi$counts)
rownames(metadata_table)
View(metadata_table)
metadata_table <- read.csv("ptb_metadata_table.csv")
View(metadata_table)
metadata_table <- read.csv("ptb_metadata_table.csv", row.names = 1)
View(metadata_table)
pca_calculated <- pca(count_matrix_filtered, metadata = metadata_table, removeVar = 0.1)
count_matrix_filtered <- read.csv("outputs/counts_filtered.csv", row.names = 1)
pca_calculated <- pca(count_matrix_filtered, metadata = metadata_table, removeVar = 0.1)
biplot(pca_calculated, colby = "time", legendPosition = "right", lab = NULL)
rownames(metadata_table) == colnames(txi$counts)
dds <- DESeqDataSetFromTximport(txi, sampleTable=metadata_table, ~1)
class(txi)
class(tx2gene_mouse)
class(tx2gene_mouse_c)
txi <- tximport(files, type = "salmon", tx2gene = tx2gene_mouse_c, ignoreTxVersion=T)
class(txi)
dds <- DESeqDataSetFromTximport(txi, sampleTable=metadata_table, ~1)
listAttributes(ensembl)
biomart_list <- getBM(filter="ensembl_transcript_id",
attributes = c("ensembl_transcript_id", "mgi_symbol","transcript_biotype",
"description","ensembl_gene_id"),
values = counts$ensembl_tr_id, mart = ensembl)
biomart_list <- getBM(filter="ensembl_transcript_id",
attributes = c("ensembl_transcript_id", "mgi_symbol","transcript_biotype",
"description","ensembl_gene_id"),
values = counts$ensembl_tr_id, mart = ensembl)
View(counts)
View(counts)
counts$ensembl_tr_id <- gsub("\\.\\d+$", "", counts$ensembl_tr_id)
biomart_list <- getBM(filter="ensembl_transcript_id",
attributes = c("ensembl_transcript_id", "mgi_symbol","transcript_biotype",
"description","ensembl_gene_id"),
values = counts$ensembl_tr_id, mart = ensembl)
View(biomart_list)
tx2gene_mouse_c <- dplyr::select(as.data.frame(biomart_list), TXNAME = ensembl_transcript_id, GENEID = ensembl_gene_id)
head(tx2gene_mouse_c)
txi <- tximport(files, type = "salmon", tx2gene = tx2gene_mouse_c, ignoreTxVersion=T)
names(txi)
head(txi$counts)
class(txi)
dds <- DESeqDataSetFromTximport(txi, sampleTable=metadata_table, ~1)
View(metadata_table)
dds <- DESeqDataSetFromTximport(txi, sampleTable=metadata_table, ~ genotype)
txi <- as.data.frame(txi)
dds <- DESeqDataSetFromTximport(txi, sampleTable=metadata_table, ~ genotype)
txi <- tximport(files, type = "salmon", tx2gene = tx2gene_mouse_c, ignoreTxVersion=T)
dds <- DESeqDataSetFromTximport(txi, sampleTable=metadata_table, ~ genotype)
class(metadata_table)
View(metadata_table)
?DESeqDataSetFromTximport
sampleTable <- data.frame(condition = factor(rep(c("A", "B"), each = 6)))
rownames(sampleTable) <- colnames(txi$counts)
dds <- DESeqDataSetFromTximport(txi, sampleTable, ~ condition)
metadata_table$genotype
sampleTable <- data.frame(genotype = factor(rep(c("wt" , "wt" , "wt" , "wt" , "PTB" , "PTB", "PTB", "PTB" ,"PTB" , "PTB", "PTB" ,"PTB"))))
rownames(sampleTable) <- colnames(txi$counts)
View(sampleTable)
View(metadata_table)
sampleTable$brain_part <- metadata_table$brain_part
sampleTable$brain_part <- as.factor(metadata_table$brain_part)
sampleTable$time <- as.factor(metadata_table$time)
sampleTable$replicate <-  as.factor(metadata_table$replicate)
dds <- DESeqDataSetFromTximport(txi, sampleTable , ~ genotype)
dds <- DESeqDataSetFromTximport(txi, metadata_table , ~ genotype)
dds <- DESeqDataSetFromTximport(txi, metadata_table , ~ genotype+time+brain_part+genotype:time)
dds <- DESeqDataSetFromTximport(txi, metadata_table , ~ genotype + time + brain_part)
metadata_table$replicate <- as.factor(metadata_table$replicate)
dds <- DESeqDataSetFromTximport(txi, metadata_table , ~ genotype + time + brain_part)
metadata_table$time <-  as.factor(metadata_table$table)
metadata_table$time <-  as.factor(metadata_table$time)
dds <- DESeqDataSetFromTximport(txi, metadata_table , ~ genotype + time + brain_part)
metadata_table$time <-  as.factor(metadata_table$time)
dds <- DESeqDataSetFromTximport(txi, metadata_table , ~ genotype + time + brain_part)
metadata_table$replicate <- as.factor(c("A","B"), each = 6)
metadata_table$replicate <- factor(c("A","B"), each = 6)
metadata_table$replicate <- as.factor(c("A","B","A","B","A","B","A","B","A","B","A","B"))
dds <- DESeqDataSetFromTximport(txi, metadata_table , ~ genotype + time + brain_part)
View(metadata_table)
class(metadata_table)
dds <- DESeqDataSetFromTximport(txi, metadata_table , ~ genotype)
dds <- DESeqDataSetFromTximport(txi, metadata_table , ~ genotype+time)
dds <- DESeqDataSetFromTximport(txi, metadata_table , ~ genotype+time+genotype:time)
dds <- DESeqDataSetFromTximport(txi, metadata_table , ~brain_part+genotype:time)
dds <- DESeqDataSetFromTximport(txi, metadata_table , ~genotype+time+brain_part+genotype:time)
dds <- DESeqDataSetFromTximport(txi, metadata_table , ~time+brain_part)
dds <- DESeqDataSetFromTximport(txi, metadata_table , ~1)
vsd <- vst(dds, blind = TRUE)
counts_vst_filtered <- assay(vsd) %>% as.data.frame()
counts_vst_filtered
pca_calculated <- pca(counts_vst_filtered, metadata = metadata_table, removeVar = 0.1)
biplot(pca_calculated, colby = "genotype", legendPosition = "right", lab = NULL)
biplot(pca_calculated, colby = "brain_part", legendPosition = "right", lab = NULL)
biplot(pca_calculated, colby = "time", legendPosition = "right", lab = NULL)
biplot(pca_calculated, colby = "replicate", legendPosition = "right", lab = NULL)
biplot(pca_calculated, colby = "genotype", legendPosition = "right", lab = NULL)
biplot(pca_calculated, colby = "brain_part", legendPosition = "right", lab = NULL)
biplot(pca_calculated, colby = "time", legendPosition = "right", lab = NULL)
biplot(pca_calculated, colby = "replicate", legendPosition = "right", lab = NULL)
pairsplot(pca_calculated, colby = "time")
plotloadings(pca_calculated, components = getComponents(pca_calculated,
c(1, 2, 5)), rangeRetain = 0.1, drawConnectors = TRUE)
matrix_correlations <- cor(counts_vst_filtered)
f1 <- pheatmap(matrix_correlations, annotation = metadata_table, show_rownames = TRUE,
show_colnames = FALSE)
ggsave("outputs/clustering.png", f1, device = "clustering")
clustering <- pheatmap(matrix_correlations, annotation = metadata_table, show_rownames = TRUE,
show_colnames = FALSE)
ggsave("outputs/clustering.png", clustering, device = "png")
ggsave("outputs/clustering.pdf", clustering, device = "pdf")
ggsave("outputs/clustering.pdf", clustering, device = "pdf", width = 8, height = 7)
ggsave("outputs/clustering.pdf", clustering, device = "pdf", width = 9, height = 7)
